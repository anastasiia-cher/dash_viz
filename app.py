from flask import Flask, render_template
import dash
from dash import html, dcc, dash_table
import pandas as pd
import plotly.express as px
import networkx as nx
import matplotlib.colors as mcolors
from itertools import combinations, chain
import plotly.graph_objects as go
import re
from network import plot_communities, get_communities, create_network
from ast import literal_eval

# –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
kdf = pd.read_csv("titles_keywords.csv")

# –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–æ–ª–±—á–∞—Ç—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º
df = kdf["title"].value_counts().reset_index()[:10]
analyst = kdf[kdf["title"].str.contains("–ê–Ω–∞–ª–∏—Ç–∏–∫|analyst", flags=re.IGNORECASE)]["title"].reset_index()
df2 = analyst["title"].value_counts().reset_index()[:10]
fig = px.bar(df, x="title", y="count", title="–¢–æ–ø-10")
fig2 = px.bar(df2, x="title", y="count", title="–¢–æ–ø-10")

# –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∞
kdf["keywords"] = kdf["keywords"].apply(literal_eval)
kdf = kdf[["title", "keywords"]]
net = create_network(kdf)
G = nx.Graph()
G.add_edges_from(net)
communities, S = get_communities(G)
fig3 = plot_communities(communities, S)

# –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–∞–±–ª–∏—Ü—ã
kdf["keywords"] = kdf["keywords"].apply(lambda x: ", ".join(x))


# —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
server = Flask(__name__)

@server.route('/')
def index():
    return render_template("index.html")


# —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
dash_dashboard_app = dash.Dash(
    __name__,
    server=server,
    url_base_pathname='/data/',
    suppress_callback_exceptions=True
)

dash_dashboard_app.layout = html.Div(style={
    'fontFamily': 'Sans-serif',
    'textAlign': 'center',
    'padding': '10px',
    'backgroundColor': '#f0f8ff'
}, children=[
    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    html.H2("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"),

    # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    html.A("–ù–∞–∑–∞–¥", href='/', style={
        'color': '#28a745',
        'textDecoration': 'none',
        'fontSize': '1.1em',
        'marginBottom': '100px'
    }),

    # —Ç–∞–±–ª–∏—Ü–∞
    dash_table.DataTable(
        data=kdf.to_dict('records'),
        columns=[{"name": i, "id": i} for i in kdf.columns],
        style_cell={'textAlign': 'center', 'padding': '1px'},
        style_header={
            'backgroundColor': '#28a745',
            'color': 'white',
            'fontWeight': 'bold'
        },
        style_table={'width': '100%', 'margin': '0 auto', 'marginTop': '10px',}
    ),
])


# —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
dash_dashboard_app = dash.Dash(
    __name__,
    server=server,
    url_base_pathname='/dashboard/',
    suppress_callback_exceptions=True
)

dash_dashboard_app.layout = html.Div(style={
    'fontFamily': 'Sans-serif',
    'textAlign': 'center',
    'padding': '10px',
    'backgroundColor': '#f0f8ff'
}, children=[
    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    html.H2("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"),

    # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    html.A("–ù–∞–∑–∞–¥", href='/', style={
        'color': '#28a745',
        'textDecoration': 'none',
        'fontSize': '1.1em',
        'marginBottom': '100px'
    }),

    # –≥—Ä–∞—Ñ–∏–∫–∏ –≤–æ –≤–∫–ª–∞–¥–∫–∞—Ö
    dcc.Tabs([
        dcc.Tab(label="–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏", children=[
            dcc.Graph(figure=fig, style={'marginBottom': '0px', 'marginTop': '0px'}),  
        ]),
        dcc.Tab(label="–í–∞–∫–∞–Ω—Å–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", children=[
            dcc.Graph(figure=fig2, style={'marginBottom': '0px', 'marginTop': '0px'}),  
        ])
    ], style={'marginTop': '10px', 'fontFamily': 'Sans-serif'}),

    # –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞
    dcc.Graph(figure=fig3, style={'marginBottom': '10px', 'marginTop': '10px'}),])


# –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    server.run(debug=False)
